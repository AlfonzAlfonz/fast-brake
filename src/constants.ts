export const IS_DEBUGGING = process.env.DEBUG === "true" || false;

export const LOG_PREFIX = "ðŸš€ âš¡ Fast-Brake:";

export const ES_VERSIONS = {
  es5: { chrome: 5, firefox: 4, safari: 5 },
  es2015: { chrome: 51, firefox: 54, safari: 10 },
  es2016: { chrome: 52, firefox: 55, safari: 10.1 },
  es2017: { chrome: 58, firefox: 53, safari: 11 },
  es2018: { chrome: 64, firefox: 58, safari: 12 },
  es2019: { chrome: 73, firefox: 62, safari: 12.1 },
  es2020: { chrome: 80, firefox: 74, safari: 13.1 },
  es2021: { chrome: 85, firefox: 79, safari: 14.1 },
  es2022: { chrome: 94, firefox: 93, safari: 15.4 },
  es2023: { chrome: 110, firefox: 104, safari: 16.4 },
  es2024: { chrome: 120, firefox: 119, safari: 17.2 },
  es2025: { chrome: 125, firefox: 125, safari: 18 },
};

export const VERSION_ORDER = [
  "es5",
  "es2015",
  "es2016",
  "es2017",
  "es2018",
  "es2019",
  "es2020",
  "es2021",
  "es2022",
  "es2023",
  "es2024",
  "es2025",
  "esnext",
];

export const VERSIONS = VERSION_ORDER;

export const MODULE_ONLY_FEATURES = ["import", "export"];

export const MDN_URLS = [
  "https://raw.githubusercontent.com/mdn/browser-compat-data/main/javascript/builtins.json",
  "https://raw.githubusercontent.com/mdn/browser-compat-data/main/javascript/statements.json",
  "https://raw.githubusercontent.com/mdn/browser-compat-data/main/javascript/expressions.json",
  "https://raw.githubusercontent.com/mdn/browser-compat-data/main/javascript/operators.json",
  "https://raw.githubusercontent.com/mdn/browser-compat-data/main/javascript/grammar.json",
];

export const FEATURE_STRINGS: Record<string, string[]> = {
  arrow_functions: ["=>"],
  template_literals: ["`"],
  classes: ["class "],
  let_const: ["let ", "const "],
  spread_rest: ["..."],
  import: ["import "],
  export: ["export "],
  promise: ["Promise"],
  promise_resolve: ["Promise.resolve("],
  promise_reject: ["Promise.reject("],
  map: ["new Map"],
  set: ["new Set"],
  weakmap: ["new WeakMap"],
  weakset: ["new WeakSet"],
  symbol: ["Symbol("],
  proxy: ["new Proxy"],
  reflect: ["Reflect."],
  array_includes: [".includes("],
  array_flat: [".flat(", ".flatMap("],
  object_entries: ["Object.entries("],
  object_values: ["Object.values("],
  object_fromEntries: ["Object.fromEntries("],
  string_padStart: [".padStart("],
  string_padEnd: [".padEnd("],
  string_trimStart: [".trimStart("],
  string_trimEnd: [".trimEnd("],
  string_matchAll: [".matchAll("],
  string_replaceAll: [".replaceAll("],
  promise_finally: [".finally("],
  promise_allSettled: ["Promise.allSettled("],
  promise_any: ["Promise.any("],
  import_meta: ["import.meta"],
  dynamic_import: ["import("],
  globalThis: ["globalThis"],
  array_at: [".at("],
  object_hasOwn: ["Object.hasOwn("],
  array_findLast: [".findLast("],
  array_findLastIndex: [".findLastIndex("],
  array_toReversed: [".toReversed("],
  array_toSorted: [".toSorted("],
  array_toSpliced: [".toSpliced("],
  array_with: [".with("],
  array_fromAsync: ["Array.fromAsync("],
  promise_withResolvers: ["Promise.withResolvers("],
  optional_chaining: ["?."],
  nullish_coalescing: ["??"],
  // bigint: ["n"], // Removed: too broad, matches any 'n'. Use pattern only.
  logical_assignment: ["||=", "&&=", "??="],
  // numeric_separators: ["_"], // Removed: too broad, matches any '_'. Use pattern only.
  exponentiation: ["**"],
  async_await: ["async ", "await "],
  async_iteration: ["for await"],
  // rest_spread_properties: ["..."], // Removed: can't distinguish array spread (ES2015) from object spread (ES2018). Use pattern only.
  generators: ["function*", "yield "],
  // destructuring: ["[", "{"], // Removed: too broad, matches any bracket. Use pattern only.
  // default_params: ["="], // Removed: too broad, matches any '='. Use pattern only.
  // for_of: ["for (", " of "], // Removed: too broad, matches regular for loops. Use pattern only.
  extends: [" extends "],
  class_fields: ["#"],
  static_blocks: ["static {"],
};

export const FEATURE_PATTERNS: Record<string, RegExp> = {
  // Basic language features
  arrow_functions: /=>/,
  template_literals: /`/,
  classes: /\bclass\s+[a-zA-Z_$]/,
  class: /\bclass\s+[a-zA-Z_$]/,
  let_const: /\b(?:let|const)\s+/,
  const: /\bconst\s+/,
  let: /\blet\s+/,
  spread_syntax: /\.\.\./,
  async_function: /\basync\s+function/,
  async_arrow_function: /\basync\s*(?:\([^)]*\)|[a-zA-Z_$][a-zA-Z0-9_$]*)\s*=>/,
  await: /\bawait\s/,
  optional_chaining: /\?\./,
  nullish_coalescing: /\?\?/,
  bigint: /\b\d+n\b/,
  numeric_separators: /\b\d[\d_]+\d\b/,
  logical_assignment: /(?:\|\|=|&&=|\?\?=)/,
  exponentiation: /\*\*/,
  
  // Class features
  class_fields: /#[a-zA-Z_$][a-zA-Z0-9_$]*\s*=/,
  class_private_methods: /#[a-zA-Z_$][a-zA-Z0-9_$]*\s*\(/,
  private_fields: /#[a-zA-Z_$][a-zA-Z0-9_$]*/,
  static_blocks: /\bstatic\s*\{/,
  
  // Advanced patterns
  destructuring: /(?:const|let|var)\s*[[{]/,
  default_params: /function[^(]*\([^)]*=[^)]*\)|(?:\(|,)\s*\w+\s*=\s*[^,)]+/,
  for_of: /\bfor\s*\([^)]*\bof\b/,
  top_level_await: /^[^{]*\bawait\s/m,
  hashbang: /^#!/,
  regexp_v_flag: /\/[^/]*\/[gimsuvy]*v[gimsuvy]*/,
  object_groupBy: /Object\.groupBy\s*\(/,
  map_groupBy: /Map\.groupBy\s*\(/,
  temporal: /Temporal\./,
  regexp_duplicate_named_groups: /\(\?<([^>]+)>.*\(\?<\1>/,
  set_methods:
    /\.(?:intersection|union|difference|symmetricDifference|isSubsetOf|isSupersetOf|isDisjointFrom)\s*\(/,
  
  // Patterns from QUICK_PATTERNS that were missing
  rest_spread_properties: /\{[^}]*\.\.\.[^.]/,
  weakref: /\bnew\s+WeakRef\b/,
  finalization_registry: /\bnew\s+FinalizationRegistry\b/,
};


export const FEATURE_VERSIONS: Record<string, string> = {
  arrow_functions: "es2015",
  template_literals: "es2015",
  classes: "es2015",
  extends: "es2015",
  let_const: "es2015",
  spread_rest: "es2015",
  for_of: "es2015",
  destructuring: "es2015",
  default_params: "es2015",
  generators: "es2015",
  import: "es2015",
  export: "es2015",
  promise: "es2015",
  promise_resolve: "es2015",
  promise_reject: "es2015",
  map: "es2015",
  set: "es2015",
  weakmap: "es2015",
  weakset: "es2015",
  symbol: "es2015",
  proxy: "es2015",
  reflect: "es2015",
  exponentiation: "es2016",
  async_await: "es2017",
  async_iteration: "es2018",
  rest_spread_properties: "es2018",
  array_flat: "es2019",
  optional_chaining: "es2020",
  nullish_coalescing: "es2020",
  bigint: "es2020",
  promise_allSettled: "es2020",
  globalThis: "es2020",
  logical_assignment: "es2021",
  numeric_separators: "es2021",
  string_replaceAll: "es2021",
  promise_any: "es2021",
  weakref: "es2021",
  finalization_registry: "es2021",
  class_fields: "es2022",
  private_fields: "es2022",
  static_blocks: "es2022",
  array_at: "es2022",
  object_hasOwn: "es2022",
  top_level_await: "es2022",

  array_findLast: "es2023",
  array_findLastIndex: "es2023",
  array_toReversed: "es2023",
  array_toSorted: "es2023",
  array_toSpliced: "es2023",
  array_with: "es2023",
  hashbang: "es2023",

  regexp_v_flag: "es2024",
  array_fromAsync: "es2024",
  promise_withResolvers: "es2024",
  object_groupBy: "es2024",
  map_groupBy: "es2024",

  temporal: "es2025",
  regexp_duplicate_named_groups: "es2025",
  set_methods: "es2025",
  
  array_includes: "es2016",
  object_entries: "es2017",
  object_values: "es2017",
  object_fromEntries: "es2019",
  string_padStart: "es2017",
  string_padEnd: "es2017",
  string_trimStart: "es2019",
  string_trimEnd: "es2019",
  string_matchAll: "es2020",
  promise_finally: "es2018",
  import_meta: "es2020",
  dynamic_import: "es2020",
  
  class: "es2015",
  const: "es2015",
  let: "es2015",
  spread_syntax: "es2015",
  async_function: "es2017",
  async_arrow_function: "es2017",
  await: "es2017",
  class_private_methods: "es2022",
};

export const PARSER_MAPPINGS: {
  [parser: string]: {
    [feature: string]: string | string[];
  };
} = {
  ACORN: {
    arrow_functions: "ArrowFunctionExpression",
    template_literals: "TemplateLiteral",
    classes: "ClassDeclaration",
    extends: "ClassDeclaration.superClass",
    let: "VariableDeclaration.kind=let",
    const: "VariableDeclaration.kind=const",
    let_const: [
      "VariableDeclaration.kind=let",
      "VariableDeclaration.kind=const",
    ],
    spread_syntax: "SpreadElement",
    rest_parameters: "RestElement",
    for_of: "ForOfStatement",
    for_await_of: "ForAwaitStatement",
    destructuring: ["ObjectPattern", "ArrayPattern"],
    default_params: "AssignmentPattern",
    generators: "FunctionDeclaration.generator=true",
    async_function: "FunctionDeclaration.async=true",
    async_arrow_function: "ArrowFunctionExpression.async=true",
    await: "AwaitExpression",
    yield: "YieldExpression",
    import: "ImportDeclaration",
    export: [
      "ExportNamedDeclaration",
      "ExportDefaultDeclaration",
      "ExportAllDeclaration",
    ],
    import_meta: "MetaProperty",
    dynamic_import: "ImportExpression",
    optional_chaining: "ChainExpression",
    nullish_coalescing: "LogicalExpression.operator=??",
    logical_assignment: "AssignmentExpression.operator=||=|&&=|??=",
    bigint: "BigIntLiteral",
    numeric_separators: "NumericLiteral",
    private_fields: "PrivateIdentifier",
    class_fields: "PropertyDefinition",
    static_blocks: "StaticBlock",
    exponentiation: "BinaryExpression.operator=**",
  },

  BABEL: {
    bigint: "BigIntLiteral",
    numeric_separators: "NumericLiteral",
    private_fields: "ClassPrivateProperty",
    class_fields: "ClassProperty",
    optional_chaining: "OptionalMemberExpression",
    dynamic_import: "Import",
  },

  TYPESCRIPT: {
    import: "ImportDeclaration",
    export: "ExportDeclaration",
    optional_chaining: "OptionalMemberExpression",
    nullish_coalescing: "LogicalExpression",
    private_fields: "PrivateIdentifier",
  },

  ESPRIMA: {
    arrow_functions: "ArrowFunctionExpression",
    template_literals: "TemplateLiteral",
    classes: "ClassDeclaration",
    let: "VariableDeclaration",
    const: "VariableDeclaration",
    for_of: "ForOfStatement",
    generators: "FunctionExpression",
    import: "ImportDeclaration",
    export: "ExportDeclaration",
  },

  ES_CHECK: {
    arrow_functions: "ArrowFunctions",
    template_literals: "TemplateLiterals",
    classes: "class",
    extends: "extends",
    let: "let",
    const: "const",
    let_const: ["let", "const"],
    spread_syntax: "ArraySpread",
    rest_parameters: "RestSpread",
    for_of: "ForOf",
    destructuring: "Destructuring",
    default_params: "DefaultParams",
    generators: "Generators",
    async_function: "AsyncAwait",
    async_arrow_function: "AsyncAwait",
    async_await: "AsyncAwait",
    for_await_of: "AsyncIteration",
    import: "import",
    export: "export",
    optional_chaining: "OptionalChaining",
    nullish_coalescing: "NullishCoalescing",
    bigint: "BigInt",
    logical_assignment: "LogicalAssignment",
    numeric_separators: "NumericSeparators",
    private_fields: "PrivateClassFields",
    class_fields: "ClassFields",
    static_blocks: "ClassStaticBlocks",
    exponentiation: "ExponentOperator",
    promise: "Promise",
    promise_resolve: "PromiseResolve",
    promise_reject: "PromiseReject",
    promise_any: "PromiseAny",
    promise_allSettled: "PromiseAllSettled",
    promise_finally: "PromiseFinally",
    map: "Map",
    set: "Set",
    weakmap: "WeakMap",
    weakset: "WeakSet",
    symbol: "Symbol",
    proxy: "Proxy",
    reflect: "Reflect",
    weakref: "WeakRef",
    finalization_registry: "FinalizationRegistry",
    globalThis: "globalThis",
    top_level_await: "TopLevelAwait",
    array_at: "ArrayPrototypeAt",
    array_includes: "ArrayPrototypeIncludes",
    array_flat: "ArrayFlat",
    array_flatMap: "ArrayFlatMap",
    array_findLast: "ArrayFindLast",
    array_findLastIndex: "ArrayFindLastIndex",
    array_toReversed: "ArrayToReversed",
    array_toSorted: "ArrayToSorted",
    array_toSpliced: "ArrayToSpliced",
    array_with: "ArrayWith",
    object_entries: "ObjectEntries",
    object_values: "ObjectValues",
    object_fromEntries: "ObjectFromEntries",
    object_hasOwn: "ObjectHasOwn",
    object_groupBy: "ObjectGroupBy",
    string_padStart: "StringPadStart",
    string_padEnd: "StringPadEnd",
    string_matchAll: "StringMatchAll",
    string_replaceAll: "StringReplaceAll",
    string_at: "StringPrototypeAt",
    hashbang: "Hashbang",
    regexp_v_flag: "RegExpUnicodeSetFlag",
    regexp_duplicate_named_groups: "DuplicateNamedCaptureGroups",
    set_methods: "SetMethods",
  },
};

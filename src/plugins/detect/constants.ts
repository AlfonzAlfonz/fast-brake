export const FEATURE_STRINGS: Record<string, string[]> = {
  arrow_functions: ["=>"],
  template_literals: ["`"],
  let_const: ["let ", "const "],
  spread_rest: ["..."],
  generators: ["function*", "yield "],
  promise: ["Promise"],
  map: ["new Map"],
  set: ["new Set"],
  weakmap: ["new WeakMap"],
  weakset: ["new WeakSet"],
  symbol: ["Symbol("],
  proxy: ["new Proxy"],
  reflect: ["Reflect."],
  exponentiation: ["**"],
  optional_chaining: ["?."],
  nullish_coalescing: ["??"],
  globalThis: ["globalThis"],
  logical_assignment: ["||=", "&&=", "??="],
  string_replaceAll: [".replaceAll("],
  promise_any: ["Promise.any("],
  promise_resolve: ["Promise.resolve("],
  promise_reject: ["Promise.reject("],
  weakref: ["new WeakRef"],
  finalization_registry: ["new FinalizationRegistry"],
  array_at: [".at("],
  object_hasOwn: ["Object.hasOwn("],
  array_findLast: [".findLast("],
  array_findLastIndex: [".findLastIndex("],
  array_toReversed: [".toReversed("],
  array_toSorted: [".toSorted("],
  array_toSpliced: [".toSpliced("],
  array_with: [".with("],
  array_fromAsync: ["Array.fromAsync("],
  promise_withResolvers: ["Promise.withResolvers("],
  object_groupBy: ["Object.groupBy("],
  map_groupBy: ["Map.groupBy("],
  temporal: ["Temporal."],
  array_flat: [".flat(", ".flatMap("],
  promise_allSettled: ["Promise.allSettled("],
};

export const FEATURE_PATTERNS: Record<string, RegExp> = {
  classes: /\bclass\s+[a-zA-Z_$]/,
  extends: /\bclass\s+\w+\s+extends\s+/,
  for_of: /\bfor\s*\([^)]*\bof\b/,
  destructuring: /(?:const|let|var)\s*[[{]/,
  default_params: /function[^(]*\([^)]*=[^)]*\)/,
  async_await: /\b(?:async\s+function|async\s*(?:\([^)]*\)|[a-zA-Z_$][a-zA-Z0-9_$]*)\s*=>|await\s)/,
  async_iteration: /\bfor\s+await\s*\(/,
  rest_spread_properties: /\{[^}]*\.\.\.[^.]/,
  bigint: /\b\d+n\b/,
  numeric_separators: /\b\d+_\d+/,
  class_fields: /#[a-zA-Z_$]/,
  private_fields: /#[a-zA-Z_$]/,
  static_blocks: /\bstatic\s*\{/,
  top_level_await: /^[^{]*\bawait\s/m,
  hashbang: /^#!/,
  regexp_v_flag: /\/[^/]*\/[gimsuvy]*v[gimsuvy]*/,
  regexp_duplicate_named_groups: /\(\?<([^>]+)>.*\(\?<\1>/,
  set_methods: /\.(?:intersection|union|difference|symmetricDifference|isSubsetOf|isSupersetOf|isDisjointFrom)\s*\(/,
};

export const FEATURE_VERSIONS: Record<string, string> = {
  arrow_functions: "es2015",
  template_literals: "es2015",
  classes: "es2015",
  extends: "es2015",
  let_const: "es2015",
  spread_rest: "es2015",
  for_of: "es2015",
  destructuring: "es2015",
  default_params: "es2015",
  generators: "es2015",
  promise: "es2015",
  promise_resolve: "es2015",
  promise_reject: "es2015",
  map: "es2015",
  set: "es2015",
  weakmap: "es2015",
  weakset: "es2015",
  symbol: "es2015",
  proxy: "es2015",
  reflect: "es2015",
  exponentiation: "es2016",
  async_await: "es2017",
  async_iteration: "es2018",
  rest_spread_properties: "es2018",
  array_flat: "es2019",
  optional_chaining: "es2020",
  nullish_coalescing: "es2020",
  bigint: "es2020",
  promise_allSettled: "es2020",
  globalThis: "es2020",
  logical_assignment: "es2021",
  numeric_separators: "es2021",
  string_replaceAll: "es2021",
  promise_any: "es2021",
  weakref: "es2021",
  finalization_registry: "es2021",
  class_fields: "es2022",
  private_fields: "es2022",
  static_blocks: "es2022",
  array_at: "es2022",
  object_hasOwn: "es2022",
  top_level_await: "es2022",

  array_findLast: "es2023",
  array_findLastIndex: "es2023",
  array_toReversed: "es2023",
  array_toSorted: "es2023",
  array_toSpliced: "es2023",
  array_with: "es2023",
  hashbang: "es2023",

  regexp_v_flag: "es2024",
  array_fromAsync: "es2024",
  promise_withResolvers: "es2024",
  object_groupBy: "es2024",
  map_groupBy: "es2024",

  temporal: "es2025",
  regexp_duplicate_named_groups: "es2025",
  set_methods: "es2025",
};

export const VERSION_ORDER = [
  "es5",
  "es2015",
  "es2016",
  "es2017",
  "es2018",
  "es2019",
  "es2020",
  "es2021",
  "es2022",
  "es2023",
  "es2024",
  "es2025",
  "esnext",
];
